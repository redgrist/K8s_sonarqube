apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: sonarqube
  name: sonarqube
  namespace: sonarqube
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarqube
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: sonarqube
    spec:
      tolerations:
      - key: node.kubernetes.io/not-ready
        effect: NoExecute
        tolerationSeconds: 240
      - key: node.kubernetes.io/unreachable
        effect: NoExecute
        tolerationSeconds: 240
      securityContext:
        fsGroup: 999
      containers:
        - name: sonarqube
          image: sonarqube:8.7.0-community
          resources:
            requests:
              memory: "2G"
              cpu: 2
            limits:
              memory: "4G"
              cpu: 4
          volumeMounts:
          - mountPath: "/opt/sonarqube/data/"
            name: sonar-data
          - mountPath: "/opt/sonarqube/extensions/"
            name: sonar-extensions
          env:
          - name: sonar.search.javaAdditionalOpts
            value: -Dnode.store.allow_mmap=false
          - name: "sonar.jdbc.username"
            value: "postgres"  #Put your db username
          - name: "sonar.jdbc.url"
            value: "jdbc:postgresql://sonarqube-db:5432/sonar" #DB URL
          - name: "sonar.jdbc.password"
            valueFrom:
              secretKeyRef:
                name: sonarqube-db-secret
                key: password
          ports:
          - containerPort: 9000
            protocol: TCP
      volumes:
      - name: sonar-data
        persistentVolumeClaim:
          claimName: sonarqube-data
      - name: sonar-extensions
        persistentVolumeClaim:
          claimName: sonarqube-extensions
      initContainers:
      - name: init-postgres
        image: busybox
        command: ['sh', '-c', "until nslookup sonarqube-db; do echo waiting for db; sleep 60; done"]
        # command: ['sh', '-c', 'sleep 120']
        